#include "ScreenController.h"
#include "TextRenderer.h"
#include "raylib.h"
#include "Player.h"
#include "Coin.h"
#include "Obstacle.h"
#include <cmath>

#define GROUND_Y 450 
#define MAP_LENGTH 2000 
// #define GROUND_HEIGHT 150 

ScreenController::ScreenController(int screenWidth, int screenHeight, Player& player, Coin* coins, int coinCount, Obstacle& obstacle, Texture2D& background)
    : screenWidth(screenWidth), screenHeight(screenHeight), player(player), coins(coins), coinCount(coinCount), obstacle(obstacle), background(background), groundTile{} {
    camera.target = Vector2{ player.GetRec().x + player.GetRec().width / 2, player.GetRec().y + player.GetRec().height / 2 };
    camera.offset = Vector2{ screenWidth / 2.0f, screenHeight / 2.0f };
    camera.rotation = 0.0f;
    camera.zoom = 1.0f;
}



ScreenController::~ScreenController() {
}

void ScreenController::Update(float& time, int& score, bool& gameOver) {
    if (!gameOver) {
        player.Update();

        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏°‡∏û
        float playerNextX = player.GetRec().x + player.GetVelocity().x; // ‡∏î‡∏π‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á player

        if (playerNextX < mapStartX) {
            player.SetPosition(mapStartX, player.GetRec().y);
        }
        if (playerNextX + player.GetRec().width > mapEndX) {
            player.SetPosition(mapEndX - player.GetRec().width, player.GetRec().y);
        }


        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
        for (int i = 0; i < coinCount; i++) {
            coins[i].SetPosition(coins[i].GetRec().x, GROUND_Y - 180 + 50 * sin(time + i));
            coins[i].Update();
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ
        obstacle.Update();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
        for (int i = 0; i < coinCount; i++) {
            if (!coins[i].IsCollected() && CheckCollisionRecs(player.GetRec(), coins[i].GetRec())) {
                coins[i].Collect();
                score += 5;
            }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ
        if (CheckCollisionRecs(player.GetRec(), obstacle.GetRec())) {
            gameOver = true;
        }

        time += 0.05f;

        if (score == 100 && backgroundState == 1) {
            score = 0;  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            time = 0.0f;  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
            gameOver = false;  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
            backgroundState = 2;  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á

            // ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà
            UnloadTexture(background);
            background = LoadTexture("../../../OneDrive/Desktop/Coding/Project/Compro/Background2.png");

            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á Player
            player.SetGameOver(false);
            player.Reset(100, GROUND_Y - 80);


            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ
            obstacle = Obstacle(500, GROUND_Y - 50);
        }


        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
        float playerCenterX = player.GetRec().x + player.GetRec().width / 2;
        float cameraMinX = screenWidth / 2;
        float cameraMaxX = mapEndX - screenWidth / 2;

        camera.target.x = fmax(cameraMinX, fmin(playerCenterX, cameraMaxX));
        // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏π‡∏ó
        float followSpeed = 0.1f; // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        camera.target.y += (player.GetRec().y - camera.target.y) * followSpeed;

        float minCameraY = 200.0f;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        float maxCameraY = 500.0f;  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

        if (camera.target.y < minCameraY) camera.target.y = minCameraY;
        if (camera.target.y > maxCameraY) camera.target.y = maxCameraY;
    }
    else {
        //  ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° R  
        if (IsKeyPressed(KEY_R)) {
            score = 0;
            gameOver = false;
            time = 0.0f;

            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á Player
            player.SetGameOver(false);
            player.Reset(100, GROUND_Y - 80);

            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for (int i = 0; i < coinCount; i++) {
                coins[i].Reset();
            }

            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ  
            obstacle = Obstacle(500, GROUND_Y - 50);
        }
    }
}



void ScreenController::Draw(int score, bool gameOver) {
    ClearBackground(RAYWHITE);

    // üîπ ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    DrawTextureEx(background, Vector2{ 0, 0 }, 0.0f, (float)screenWidth / background.width, WHITE);

    BeginMode2D(camera);
    //DrawRectangle(0, GROUND_Y, MAP_LENGTH, GROUND_HEIGHT, DARKBROWN);



    player.Draw();
    for (int i = 0; i < coinCount; i++) {
        coins[i].Draw();
    }
    obstacle.Draw();

    EndMode2D();

    TextRenderer textRenderer;
    if (gameOver) {
        textRenderer.DrawGameOver(screenWidth, screenHeight);
    }
    else {
        textRenderer.DrawScore(score);
    }
}
